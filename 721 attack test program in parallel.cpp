#include <stdio.h>
#include <string.h>
#include<stdlib.h>
#include <time.h>
#include <iostream>
#include <mpi.h>

#define u32 unsigned int
#define u8 unsigned char
u8 StepRound1152(int Round,u32 *key,u32 *IV)
 {
 	u8 res=0;
 	u8 reg0[1000]={0};
 	u8 reg1[1000]={0};
 	u8 reg2[1000]={0};
 	int round=Round;
 	for(int i=0;i<80;i++)
 	{
 		int word=i/32; int bit=i%32;
 		reg0[92-i]=((key[word]>>bit)&1);
 		reg1[83-i]=((IV[word]>>bit)&1);
 	}
 	reg2[0]=1;reg2[1]=1;reg2[2]=1;
 	for(int i=0;i<round-64;i++)
 	{
 		reg0[i+93]=reg2[i+45]^(reg2[i+1]&reg2[i+2])^reg2[i]^reg0[i+24];
 		reg1[i+84]=reg0[i+27]^(reg0[i+1]&reg0[i+2])^reg0[i]^reg1[i+6];
 		reg2[i+111]=reg1[i+15]^(reg1[i+1]&reg1[i+2])^reg1[i]^reg2[i+24];
 	}
 	res=reg0[93+round-65-1]^reg0[93+round-92-1]^reg1[84+round-68-1]^reg1[84+round-83-1]^reg2[111+round-65-1]^reg2[111+round-110-1];
	u8 result=((reg1[221+84-1]<<1)|res);
	return result;
 }

u8 StepRoundIm(u32 *key,u32 *IV)
{
	u8 res=0;
	u8 reg0[1000]={0};
	u8 reg1[1000]={0};
	u8 reg2[1000]={0};
	int round=721;
	for(int i=0;i<80;i++)
	{
		int word=i/32; int bit=i%32;
		reg0[92-i]=((key[word]>>bit)&1);
		reg1[83-i]=((IV[word]>>bit)&1);
	}
	reg2[0]=1;reg2[1]=1;reg2[2]=1;
	for(int i=0;i<round-60;i++)
	{
		reg0[i+93]=reg2[i+45]^(reg2[i+1]&reg2[i+2])^reg2[i]^reg0[i+24];
		reg1[i+84]=reg0[i+27]^(reg0[i+1]&reg0[i+2])^reg0[i]^reg1[i+6];
		reg2[i+111]=reg1[i+15]^(reg1[i+1]&reg1[i+2])^reg1[i]^reg2[i+24];
	}
	round = round-1 ;
	res=reg0[93+round-65]^reg0[93+round-92]^reg1[84+round-68]^reg1[84+round-83]^reg2[111+round-65]^reg2[111+round-110];
	u8 result=((reg1[221+84-1]<<1)|res);
	return result;
}


int main()
{
		int rank;      int size;  
		MPI_Init(0,0);  
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);  
    MPI_Comm_size(MPI_COMM_WORLD, &size);  
    
    u32 IV[3]={0};
		u32 key[3]={0};
		u32 key_wrong[3]={0};
		//The index can be changed according to your choice of cubes.
	
	
		int cube_index_total[31][29]=
		{
		{0,4,10,16,20,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,60,62,66,68,70,74,76},
		{0,2,4,8,14,16,20,24,28,30,32,34,36,38,42,44,46,48,50,52,54,56,60,62,66,68,70,74,76},
		{0,4,8,14,16,20,24,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,60,62,66,68,70,74,76},
		{0,4,6,10,14,16,20,24,28,30,32,34,36,38,42,44,46,48,50,52,54,56,60,62,66,68,70,74,76},
		{0,4,8,10,14,16,20,24,28,30,32,34,36,38,42,44,46,48,50,52,54,56,60,62,66,68,70,74,76},
		{0,4,8,14,16,20,24,26,28,30,32,34,36,38,42,44,46,48,50,52,54,56,60,62,66,68,70,74,76},
		{0,4,10,14,16,20,24,26,28,30,32,34,36,38,42,44,46,48,50,52,54,56,60,62,66,68,70,74,76},
		{0,10,14,16,20,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,60,62,66,68,70,74,76},
		{4,10,16,18,20,22,24,26,30,32,34,36,38,40,42,44,46,48,50,52,54,56,60,62,66,68,70,74,76},
		{4,10,16,18,20,22,24,26,28,32,34,36,38,40,42,44,46,48,50,52,54,56,60,62,66,68,70,74,76},
		{0,4,10,16,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,52,54,56,60,62,66,68,70,74,76},
		{0,2,4,8,16,20,22,24,28,30,32,34,36,38,40,42,44,46,48,50,54,56,60,62,66,68,70,74,76},
		{0,4,8,10,14,20,22,24,28,30,32,34,36,38,42,44,46,48,50,52,54,56,60,62,66,68,70,74,76},
		{0,4,8,14,16,20,22,24,28,30,32,34,36,38,40,42,44,46,48,52,54,56,60,62,66,68,70,74,76},
		{0,4,8,10,14,20,24,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,60,62,66,68,70,74,76},
		{0,4,10,14,20,22,24,26,28,30,32,34,36,38,42,44,46,48,50,52,54,56,60,62,66,68,70,74,76},
		{0,4,8,16,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,54,56,60,62,66,68,70,74,76},
		{0,4,10,16,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,60,62,66,68,70,74,76},
		{0,4,10,14,16,20,22,24,26,28,30,32,34,36,38,42,44,46,48,52,54,56,60,62,66,68,70,74,76},
		{0,4,10,14,20,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,60,62,66,68,70,74,76},
		{0,2,4,8,14,16,20,22,24,28,30,32,34,36,38,42,44,46,48,50,54,56,60,62,66,68,70,74,76},
		{0,4,10,14,16,20,24,26,28,30,32,34,36,38,40,42,44,46,48,52,54,56,60,62,66,68,70,74,76},
		{10,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,60,62,66,68,70,74,76},
		{4,10,16,18,20,22,24,26,28,30,32,36,38,40,42,44,46,48,50,52,54,56,60,62,66,68,70,74,76},
		{0,2,4,8,14,16,20,24,28,30,32,34,36,38,40,42,44,46,48,50,54,56,60,62,66,68,70,74,76},
		{0,4,8,14,16,20,22,24,26,28,30,32,34,36,38,42,44,46,48,50,54,56,60,62,66,68,70,74,76},
		{0,4,10,14,16,22,24,26,28,30,32,34,36,38,42,44,46,48,50,52,54,56,60,62,66,68,70,74,76},
		{0,4,8,14,16,20,24,26,28,30,32,34,36,38,40,42,44,46,48,50,54,56,60,62,66,68,70,74,76},
		{0,4,10,14,16,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,60,62,66,68,70,74,76},
		{0,2,4,16,20,22,24,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,60,62,66,68,70,74,76},
		{0,2,4,8,16,20,24,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,60,62,66,68,70,74,76}
	};
	
	int key_location[17]={8,9,46,71,72,73,59,60,52,10,17,18,19,1,26,27,28};
	int cube_index[29]={0};

	for(int i=0;i<29;i++)
		cube_index[i]=cube_index_total[rank/60][i];
	
	int len1=0;int len2=0;int len3=0;
	for(int i=0;i<29;i++)
	{
		if(cube_index[i]<32)
			len1++;
		else if(cube_index[i]<64)
			len2++;
		else
			len3++;
	}
	
	srand((unsigned)time(NULL) & (rank+1));
	for(int i=0;i<10;i++)
	{
		int word=i/4;int bit=i%4;
		key[word] = (key[word]<<(8*bit)) | (rand()&0xff);
	}
	key_wrong[0]=key[0];
	key_wrong[1]=key[1];
	key_wrong[2]=key[2];
	for(int i=0;i<17;i++)
	{
		int word=key_location[i]/32; int bit=key_location[i]%32;
		key_wrong[word] ^=((rand()&1)<<bit);
	}
	unsigned char res=0;
	unsigned char res_mul=0;
	unsigned char res_wrong=0;
	for(unsigned int s1=0;s1<(1<<len1);s1++)
	{
		IV[0]=0;
		for(int i1=0;i1<len1;i1++)
			IV[0] |= (((s1>>i1)&1)<<(cube_index[i1]));
		for(unsigned int s2=0;s2<(1<<len2);s2++)
		{
			IV[1]=0;
			for(int i2=0;i2<len2;i2++)
				IV[1] |= (((s2>>i2)&1)<<(cube_index[len1+i2]-32));
			for(unsigned int s3=0;s3<(1<<len3);s3++)
			{
				IV[2]=0;
				for(int i3=0;i3<len3;i3++)
					IV[2] |= (((s3>>i3)&1)<<(cube_index[len1+len2+i3]-64));
				unsigned char r=StepRoundIm(key,IV);//
				unsigned char rr=r&1;
				res^=rr;
				res_mul ^=((1^((r>>1)&1))&rr);
				r=StepRoundIm(key_wrong,IV);
				res_wrong ^=((1^((r>>1)&1))&rr);
			}	
		}
	}
	char file[20]={0};sprintf(file,"t-%d-%d.txt",rank/60,rank%60);
	FILE *fp=fopen(file,"wb");   
	fprintf(fp,"%d %d %d",res,res_mul,res_wrong);
	fclose(fp);
	MPI_Finalize(); 
	return 0;
	
}